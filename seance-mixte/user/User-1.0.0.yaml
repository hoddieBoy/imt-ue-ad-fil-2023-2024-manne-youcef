---
openapi: 3.1.0

info:
  title: User API
  description: This is the API of the User service
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers

paths:
  /user:
    post:
      tags:
        - admins
      summary: add a user
      description: By passing in the appropriate options, you can add a user
      operationId: add_user
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFormData'
        "400":
          description: bad input parameter
        "409":
          description: User already exists
  
  /user/list:
    get:
      tags:
        - developers
      summary: get the full JSON database of users
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'

  /user/{user_id}:
    get:
      tags:
        - developers
      summary: get user's detail from its id
      description: By passing in the appropriate options, you can get user's detail
      operationId: get_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user's detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
        "404":
          description: User not found
    
    put:
      tags:
        - admins
      summary: update user's detail from its id
      description: By passing in the appropriate options, you can update user's detail
      operationId: update_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: user's detail updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
        "404":
          description: User not found
    
    delete:
      tags:
        - admins
      summary: delete user's detail from its id
      description: By passing in the appropriate options, you can delete user's detail
      operationId: delete_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user's detail deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
        "404":
          description: User not found

  /user/{user_id}/bookings:
    get:
      tags:
        - developers
      summary: get the bookings from a user id
      description: By passing in the appropriate options, you can get bookings of a user
      operationId: get_booking_for_user
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: bookings of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllBookings'
        "503":
          description: Service unavailable
    
    post:
      tags:
        - admins
      summary: add a booking for a user
      description: By passing in the appropriate options, you can add a booking for a user
      operationId: add_booking_for_user
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        "400":
          description: bad input parameter
        "404":
          description: User not found
        "409":
          description: Booking already exists

  /user/{user_id}/movies:
    get:
      tags:
        - developers
      summary: get movies reserved by a user by ID
      description: By passing in the appropriate options, you can get movies reserved by a user by ID
      operationId: get_movies_for_user
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: movies reserved by a user by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
        "404":
          description: User not found
        "400":
          description: bad input parameter

  /user/{user_id}/movies/{movie_id}:
    get:
      tags:
        - developers
      summary: get movie reserved by a user by ID
      description: By passing in the appropriate options, you can get movie reserved by a user by ID
      operationId: get_movie_for_user
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: movie_id
          in: path
          description: Movie ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: movie reserved by a user by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        "404":
          description: User or Movie not found
        "400":
          description: bad input parameter

  /user/{user_id}/movies/{movie_id}/bookings:
    get:
      tags:
        - developers
      summary: get array of booking's date for a movie reserved by a user by ID
      description: By passing in the appropriate options, you can get array of booking's date for a movie reserved by a user by ID
      operationId: get_bookings_for_user
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: movie_id
          in: path
          description: Movie ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: booking's date for a movie reserved by a user by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllDates'
        "404":
          description: User or Movie not found
        "400":
          description: bad input parameter

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        -last_active
      properties:
        id:
          type: string
          example: chris_rivers
        name:
          type: string
          example: Chris Rivers
        last_active:
          type: string
          example: "2017-07-21T17:32:28Z"
    
    UserFormData:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
          example: Chris
        last_name:
          type: string
          example: Rivers

    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    
    Booking:
      type: object
      required:
        - dates
        - userid
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateItem'
    DateItem:
      required:
        - date
        - movies
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movies:
          type: array
          items:
            type: string
            example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6
    
    AllBookings:
      type: array
      items:
        $ref: '#/components/schemas/Booking'
    
    Movie:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
    
    AllMovies:
      type: array
      items:
        $ref: '#/components/schemas/Movie'
