---
openapi: 3.1.0

info:
  title: User API
  description: This is the API of the User service
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers

servers:
  - url: http://localhost:3203
    description: Local server

paths:
  /user:
    post:
      tags:
        - admins
      summary: add a user
      description: By passing in the appropriate options, you can add a user
      operationId: add_user
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFormData'

      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - data
                properties:
                  message:
                    type: string
                    example: User created
                  data:
                    $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFormError'
        "409":
          description: User already exists

  /user/list:
    get:
      tags:
        - developers
      summary: get the full JSON database of users
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'

  /user/{user_id}:
    get:
      tags:
        - developers
      summary: get user's detail from its id
      description: By passing in the appropriate options, you can get user's detail
      operationId: get_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user's detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found

    put:
      tags:
        - admins
      summary: update user's detail from its id
      description: By passing in the appropriate options, you can update user's detail
      operationId: update_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFormData'
      responses:
        "200":
          description: user's detail updated
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - data
                properties:
                  message:
                    type: string
                    example: User updated
                  data:
                    $ref: '#/components/schemas/User'
        "400":
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFormError'
        "404":
          description: User not found

    delete:
      tags:
        - admins
      summary: delete user's detail from its id
      description: By passing in the appropriate options, you can delete user's detail
      operationId: delete_user_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user's detail deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found

  /{user_id}/movies:
    get:
      tags:
        - developers
      summary: get full JSON database of available movies
      description: By passing in the appropriate options, you can get full JSON database of available movies
      operationId: get_movies
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: all movies available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
          "400":
            description: bad input parameter

          "500":
            description: internal server error

    post:
      tags:
        - admins
      summary: add a movie
      description: By passing in the appropriate options, you can add a movie
      operationId: add_movie
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
            $ref: '#/components/schemas/MovieFormData'

      responses:
        "201":
          description: Movie created
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - data
                properties:
                  message:
                    type: string
                    example: Movie created
                  data:
                    $ref: '#/components/schemas/Movie'
          "400":
            description: bad input parameter
            content:
              application/json:
              schema:
                $ref: '#/components/schemas/MovieFormError'
          "409":
            description: Movie already exists


  /{user_id}/movies/{movie_id}:
    get:
      tags:
        - developers
      summary: get movie's detail from its id
      description: By passing in the appropriate options, you can get movie's detail
      operationId: get_movie_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: movie_id
          in: path
          description: Movie ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: movie's detail
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/Movie'

        "404":
          description: Movie not found

    delete:
      tags:
        - admins
      summary: delete movie's detail from its id
      description: By passing in the appropriate options, you can delete movie's detail
      operationId: delete_movie_detail
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: movie_id
          in: path
          description: Movie ID.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: movie's detail deleted

        "400":
          description: bad input parameter

  /{user_id}/movies/{movie_id}/rating/{rating}:
    put:
      tags:
        - developers
      summary: rate a movie
      description: By passing in the appropriate options, you can rate a movie
      operationId: rate_movie
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: movie_id
          in: path
          description: Movie ID.
          required: true
          schema:
            type: string
        - name: rating
          in: path
          description: Rating.
          required: true
          schema:
            type: float
      responses:
        "200":
          description: movie's detail
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/Movie'

        "404":
          description: Movie not found

        "400":
          description: bad input parameter

        "500":
          description: internal server error

  /{user_id}/bookings:
    get:
      tags:
        - developers
      summary: get full JSON database of user's bookings
      description: By passing in the appropriate options, you can get full JSON database of user's bookings
      operationId: get_bookings
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: all bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllBookings'
          "400":
            description: bad input parameter

          "500":
            description: internal server error

    post:
      tags:
        - developers
      summary: add a booking
      description: By passing in the appropriate options, you can add a booking
      operationId: add_booking
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingForm'
      responses:
        "201":
          description: Booking created
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - data
                properties:
                  message:
                    type: string
                    example: Booking created
                  data:
                    $ref: '#/components/schemas/Booking'
          "400":
            description: bad input parameter
          "409":
            description: Booking already exists

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - last_active
      properties:
        id:
          type: string
          example: chris_rivers
        name:
          type: string
          example: Chris Rivers
        last_active:
          type: string
          example: "2017-07-21T17:32:28Z"

    UserFormData:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
          example: Chris
        last_name:
          type: string
          example: Rivers

    UserFormError:
      type: object
      required:
        - errors
        - message
      properties:
        errors:
          type: array
          items:
            type: object
            optional:
              - first_name
              - last_name
            properties:
              first_name:
                type: string
                example: "First name is required"
              last_name:
                type: string
                example: "Last name is required"

        message:
          type: string
          example: "Validation Failed"


    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'

    Movie:
      type: object
      required:
        - id
        - title
        - director
        - rating
      optional:
        - actors
      properties:
        id:
          type: string
          example: 6e8bc430-9c3a-11d9-9669-0800200c9a66
        title:
          type: string
          example: The Shawshank Redemption
        director:
          type: string
          example: Frank Darabont
        rating:
          type: float
          example: 9.3
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'

    MovieFormData:
      type: object
      required:
        - title
        - director
        - rating
      properties:
        title:
          type: string
          example: The Shawshank Redemption
        director:
          type: string
          example: Frank Darabont
        rating:
          type: float
          example: 9.3

    MovieFormError:
      type: object
      required:
        - errors
        - message
      properties:
        errors:
          type: array
          items:
            type: object
            optional:
              - title
              - director
              - rating
            properties:
            title:
              type: string
              example: "Title is required"
            director:
              type: string
              example: "Director is required"
            rating:
              type: string
              example: "Rating is required"

        message:
          type: string
          example: "Validation Failed"

    AllMovies:
      type: array
      items:
        $ref: '#/components/schemas/Movie'

    Actor:
      type: object
      required:
        - id
        - firstname
        - lastname
        - birthday
        - films
      properties:
        id:
          type: string
          example: 6e8bc430-9c3a-11d9-9669-0800200c9a66
        firstname:
          type: string
          example: Morgan
        lastname:
          type: string
          example: Freeman
        birthday:
          type: integer
          example: 1937
        films:
          type: array
          items:
            $ref: '#/components/schemas/Movie'

    BookingForm:
      type: object
      required:
        - userid
        - date
        - movie
      properties:
        userid:
          type: string
          example: 6e8bc430-9c3a-11d9-9669-0800200c9a66
        date:
          type: string
          example: 20210501
        movie:
          type: string
          example: 6e8bc430-9c3a-11d9-9669-0800200c9a66

    Booking:
      type: object
      required:
        - userid
        - dates
      properties:
        userid:
          type: string
          example: 6e8bc430-9c3a-11d9-9669-0800200c9a66
        dates:
          type: array
          items:
            $ref: '#/components/schemas/BookingDate'

    BookingDate:
      type: object
      required:
        - date
        - movies
      properties:
        date:
          type: string
          example: 2021-05-01
        movies:
          type: array
          items:
            type: string
            example: 6e8bc430-9c3a-11d9-9669-0800200c9a66

    AllBookings:
      type: array
      items:
        $ref: '#/components/schemas/Booking'

